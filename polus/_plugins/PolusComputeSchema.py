# generated by datamodel-codegen:
#   filename:  PolusComputeSchema.json
#   timestamp: 2022-02-03T01:52:08+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union, Any

from pydantic import BaseModel

from ._io import IOBase, Version


class ConditionEntry(BaseModel):
    expression: str


class CustomUIType(str, Enum):
    collection = "collection"
    stitchingVector = "stitchingVector"
    tensorflowModel = "tensorflowModel"
    csvCollection = "csvCollection"
    pyramid = "pyramid"
    notebook = "notebook"


class GpuVendor(str, Enum):
    none = "none"
    amd = "amd"
    tpu = "tpu"
    nvidia = "nvidia"


class PluginHardwareRequirements(BaseModel):
    coresMax: Optional[Union[str, float]] = None
    coresMin: Optional[Union[str, float]] = None
    cpuAVX: Optional[bool] = None
    cpuAVX2: Optional[bool] = None
    cpuMin: Optional[str] = None
    gpu: Optional[GpuVendor] = None
    gpuCount: Optional[float] = None
    gpuDriverVersion: Optional[str] = None
    gpuType: Optional[str] = None
    outDirMax: Optional[Union[str, float]] = None
    outDirMin: Optional[Union[str, float]] = None
    ramMax: Optional[Union[str, float]] = None
    ramMin: Optional[Union[str, float]] = None
    tmpDirMax: Optional[Union[str, float]] = None
    tmpDirMin: Optional[Union[str, float]] = None


class PluginInputType(str, Enum):
    path = "path"
    string = "string"
    number = "number"
    array = "array"
    boolean = "boolean"


class PluginOutputType(str, Enum):
    path = "path"


class PluginUIType(Enum):
    checkbox = "checkbox"
    color = "color"
    date = "date"
    email = "email"
    number = "number"
    password = "password"
    radio = "radio"
    range = "range"
    text = "text"
    time = "time"


class ThenEntry(BaseModel):
    action: str
    input: str
    value: str


class Validator(BaseModel):
    then: Optional[List[ThenEntry]] = None
    validator: Optional[List[ConditionEntry]] = None


class PluginInput(IOBase):
    format: Optional[str] = None
    label: Optional[str] = None
    name: str
    required: bool
    type: PluginInputType
    default: Optional[Union[str, float, bool]] = None
    value: Optional[Any] = None


class PluginOutput(IOBase):
    format: Optional[str] = None
    label: Optional[str] = None
    name: str
    type: PluginOutputType
    value: Optional[Any] = None


class PluginUIInput(BaseModel):
    bind: Optional[str] = None
    condition: Optional[Union[List[Validator], str]] = None
    default: Optional[Union[str, float, bool]] = None
    description: Optional[str] = None
    fieldset: Optional[List[str]] = None
    hidden: Optional[bool] = None
    key: str
    title: str
    type: PluginUIType


class PluginUIOutput(BaseModel):
    description: str
    format: Optional[str] = None
    name: str
    type: PluginUIType
    website: Optional[str] = None


class PluginSchema(BaseModel):
    author: Optional[str] = None
    baseCommand: Optional[List[str]] = None
    citation: Optional[str] = None
    containerId: str
    customInputs: Optional[bool] = None
    description: str
    inputs: List[PluginInput]
    institution: Optional[str] = None
    name: str
    outputs: List[PluginOutput]
    pluginHardwareRequirements: PluginHardwareRequirements
    repository: Optional[str] = None
    title: str
    ui: List[Union[PluginUIInput, PluginUIOutput]]
    version: Version
    website: Optional[str] = None



class CLTSchema(PluginSchema):

    cwlVersion: str
    id: str
    class_: str
    stderr: str
    stdout: str
