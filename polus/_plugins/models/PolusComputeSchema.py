# generated by datamodel-codegen:
#   filename:  PolusComputeSchema.json
#   timestamp: 2022-09-21T03:41:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Model(BaseModel):
    __root__: Any


class PluginInputType(Enum):
    path = 'path'
    string = 'string'
    number = 'number'
    array = 'array'
    boolean = 'boolean'


class PluginInput(BaseModel):
    format: Optional[str] = Field(None, title='Format')
    label: Optional[str] = Field(None, title='Label')
    name: str = Field(..., title='Name')
    required: bool = Field(..., title='Required')
    type: PluginInputType
    default: Optional[Union[str, float, bool]] = Field(None, title='Default')


class PluginOutputType(Enum):
    path = 'path'


class PluginOutput(BaseModel):
    format: Optional[str] = Field(None, title='Format')
    label: Optional[str] = Field(None, title='Label')
    name: str = Field(..., title='Name')
    type: PluginOutputType


class GpuVendor(Enum):
    none = 'none'
    amd = 'amd'
    tpu = 'tpu'
    nvidia = 'nvidia'


class PluginHardwareRequirements(BaseModel):
    coresMax: Optional[Union[str, float]] = Field(None, title='Coresmax')
    coresMin: Optional[Union[str, float]] = Field(None, title='Coresmin')
    cpuAVX: Optional[bool] = Field(None, title='Cpuavx')
    cpuAVX2: Optional[bool] = Field(None, title='Cpuavx2')
    cpuMin: Optional[str] = Field(None, title='Cpumin')
    gpu: Optional[GpuVendor] = None
    gpuCount: Optional[float] = Field(None, title='Gpucount')
    gpuDriverVersion: Optional[str] = Field(None, title='Gpudriverversion')
    gpuType: Optional[str] = Field(None, title='Gputype')
    outDirMax: Optional[Union[str, float]] = Field(None, title='Outdirmax')
    outDirMin: Optional[Union[str, float]] = Field(None, title='Outdirmin')
    ramMax: Optional[Union[str, float]] = Field(None, title='Rammax')
    ramMin: Optional[Union[str, float]] = Field(None, title='Rammin')
    tmpDirMax: Optional[Union[str, float]] = Field(None, title='Tmpdirmax')
    tmpDirMin: Optional[Union[str, float]] = Field(None, title='Tmpdirmin')


class ThenEntry(BaseModel):
    action: str = Field(..., title='Action')
    input: str = Field(..., title='Input')
    value: str = Field(..., title='Value')


class ConditionEntry(BaseModel):
    expression: str = Field(..., title='Expression')


class Validator(BaseModel):
    then: Optional[List[ThenEntry]] = Field(None, title='Then')
    validator: Optional[List[ConditionEntry]] = Field(None, title='Validator')


class PluginUIType(Enum):
    checkbox = 'checkbox'
    color = 'color'
    date = 'date'
    email = 'email'
    number = 'number'
    password = 'password'
    radio = 'radio'
    range = 'range'
    text = 'text'
    time = 'time'


class PluginUIInput(BaseModel):
    bind: Optional[str] = Field(None, title='Bind')
    condition: Optional[Union[List[Validator], str]] = Field(None, title='Condition')
    default: Optional[Union[str, float, bool]] = Field(None, title='Default')
    description: Optional[str] = Field(None, title='Description')
    fieldset: Optional[List[str]] = Field(None, title='Fieldset')
    hidden: Optional[bool] = Field(None, title='Hidden')
    key: str = Field(..., title='Key')
    title: str = Field(..., title='Title')
    type: PluginUIType


class PluginUIOutput(BaseModel):
    description: str = Field(..., title='Description')
    format: Optional[str] = Field(None, title='Format')
    name: str = Field(..., title='Name')
    type: PluginUIType
    website: Optional[str] = Field(None, title='Website')


class PluginSchema(BaseModel):
    author: Optional[str] = Field(None, title='Author')
    baseCommand: Optional[List[str]] = Field(None, title='Basecommand')
    citation: Optional[str] = Field(None, title='Citation')
    containerId: str = Field(..., title='Containerid')
    customInputs: Optional[bool] = Field(None, title='Custominputs')
    description: str = Field(..., title='Description')
    inputs: List[PluginInput] = Field(..., title='Inputs')
    institution: Optional[str] = Field(None, title='Institution')
    name: str = Field(..., title='Name')
    outputs: List[PluginOutput] = Field(..., title='Outputs')
    pluginHardwareRequirements: PluginHardwareRequirements
    repository: Optional[str] = Field(None, title='Repository')
    title: str = Field(..., title='Title')
    ui: List[Union[PluginUIInput, PluginUIOutput]] = Field(..., title='Ui')
    version: constr(
        regex=r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
    ) = Field(..., examples=['0.1.0', '0.1.0rc1'], title='Version')
    website: Optional[str] = Field(None, title='Website')
